import{_ as e,o,c,e as t}from"./app.4f2cb50a.js";const s="/ssVuePress/assets/proto.076b8691.png",i="/ssVuePress/assets/prototype.b46f3f59.png",d="/ssVuePress/assets/shili.f7cc6967.png",r="/ssVuePress/assets/p_proto_prototype.2e9413a0.png",l="/ssVuePress/assets/p_prototype_proto_Object_prototype.9c325b1f.png",n="/ssVuePress/assets/Object_prototype_null.903678d2.png",_="/ssVuePress/assets/Function_Person_Object.c37062d7.png",p="/ssVuePress/assets/Function_prototype_proto_Object_prototype.86944688.png",a={},u=t('<h1 id="js原型与原型链" tabindex="-1"><a class="header-anchor" href="#js原型与原型链" aria-hidden="true">#</a> js原型与原型链</h1><p>彻底理解原型与原型链，搭配 <code>核心示例图理解</code></p><h3 id="前提条件" tabindex="-1"><a class="header-anchor" href="#前提条件" aria-hidden="true">#</a> 前提条件</h3><ul><li>只要是对象，就会存在 <code>__proto__</code></li><li>只要是函数，就会有 <code>prototype</code></li><li><img src="'+s+'" alt=""></li><li><img src="'+i+'" alt=""></li></ul><h3 id="核心示例图" tabindex="-1"><a class="header-anchor" href="#核心示例图" aria-hidden="true">#</a> 核心示例图</h3><p><img src="'+d+'" alt="示例"></p><h3 id="开始操作" tabindex="-1"><a class="header-anchor" href="#开始操作" aria-hidden="true">#</a> 开始操作</h3><ul><li>以 <code>Person</code> 构造函数为例开始</li><li>通过 <code>new Person()</code> 获得到 <code>person</code> 对象</li><li>对象就存在 <code>__proto__</code>，指向的就是 <code>Person.prototype</code></li><li><img src="'+r+'" alt=""></li><li>同时我们发现，<code>p.__proto__</code> 和 <code>Person.prototype</code> 不但相等，还是一个对象 <code>{}</code></li><li>既然是对象，就又会存在 <code>__proto__</code>，但此时，这个对象指向的就是 <code>Object.prototype</code>了</li><li><img src="'+l+'" alt=""></li><li>然后 <code>Object.prototype</code> 和 <code>Object</code> 的关系，和Person是类似的，可以看图理解，这里就不再重复了</li><li>然后打印 <code>Object.prototype</code> 发现，还是一个对象，那么就还有 <code>__proto__</code>， 只不过此时，获得到的是<code>null</code>，这就是平常说的，<code>js在寻找属性的时候，会一直向上找，直到找到null</code></li><li><img src="'+n+'" alt=""></li><li>此时，object类型的解释完毕</li></ul><h3 id="另一条线-function" tabindex="-1"><a class="header-anchor" href="#另一条线-function" aria-hidden="true">#</a> 另一条线 Function</h3><ul><li>回到 <code>Person</code> 和 <code>Object</code> 构造函数</li><li>函数是如何创建的，一定是通过 <code>Function</code> 获得到的，他们都是 <code>Function</code> 的实例</li><li>实例的 <code>__pro__</code> 指向 构造的 <code>prototype</code></li><li><img src="'+_+'" alt=""></li><li>然后 <code>Function</code> 和 <code>Function.prototype</code> 的关系还是和上面类似，不多解释了</li><li>但是 <code>Function.prototype</code> 又是一个对象，所以他的 <code>__proto__</code> 又会指向到 <code>Object.protytype</code></li><li>至此 <code>Function</code> 和 <code>Object</code> 的关系闭环</li><li><img src="'+p+'" alt=""></li><li>Over~</li></ul>',10),h=[u];function m(b,f){return o(),c("div",null,h)}const g=e(a,[["render",m],["__file","index.html.vue"]]);export{g as default};
