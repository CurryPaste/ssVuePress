import{_ as o,r as p,o as i,c as s,b as e,d as n,a,e as d}from"./app.4f2cb50a.js";const l="/ssVuePress/assets/timeLine.2e824bbf.jpg",r="/ssVuePress/assets/serve.118f0ef0.jpg",t="/ssVuePress/assets/serve-succ.18ff5512.jpg",m={},u=e("h1",{id:"npx、npm、cnpm、pnpm-的区别",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#npx、npm、cnpm、pnpm-的区别","aria-hidden":"true"},"#"),n(" npx、npm、cnpm、pnpm 的区别")],-1),h={href:"https://zhuanlan.zhihu.com/p/494076214",target:"_blank",rel:"noopener noreferrer"},v=d('<ul><li>一张图了解<code>包管理器</code>的发展史。</li><li><code>npm</code> 是什么，如何从众人诟病到翻身做主人？</li><li><code>npx</code> 是什么，它解决了什么问题</li><li><code>cnpm</code> 是什么，它解决了什么问题</li><li><code>yarn</code> 是什么，它的优势</li><li><code>pnpm</code> 是什么，它的优势</li></ul><p>那这些公司或团队为什么花那么多心思开发出 <code>yarn</code> 、 <code>cnpm</code> 、 <code>pnpm</code> 这写新的包管理器呢？其实在每个人开发的过程中，<b>都会遇到包下载慢、依赖不同导致各种 bug</b>等等问提，其实这些工具就是去解决这些问题的。</p><h3 id="时间进程图" tabindex="-1"><a class="header-anchor" href="#时间进程图" aria-hidden="true">#</a> 时间进程图</h3><p><img src="'+l+'" alt=""> 图中可以清晰的看到：</p><ul><li>2010 年 <code>npm</code> 诞生第一版</li><li>时隔 4 年的 2014 年 <code>cnpm</code> 诞生</li><li>2015 年 <code>npm</code> 发布 v3 版，改掉了 v2 版本嵌套目录问题，将依赖扁平化</li><li>其实 2016 年 <code>pnpm</code> 就已经诞生，只是功能还不齐全，不被人熟知</li><li>2016 年 <code>npm@4</code> 和 <code>yarn</code> 同年同月发布，此时的 yarn 轰动一时，赢来大众喜爱， <code>yarn</code> 各指标远超 <code>npm@4</code></li><li>隔半年的 2017 年 5 月 <code>npm@5</code> 版本发布，各项功能提升。像是参考了一波 yarn，差距缩小。</li><li>2017 年 7 月 <code>npm@5.2</code> 发布， <code>npx</code> 命令诞生</li><li>2018 年 5 月 <code>npm@6</code> 发布，性能提升、<code>npm init &lt;pkg&gt;</code>命令</li></ul><h3 id="npm-是什么-如何从众人诟病到翻身做主人" tabindex="-1"><a class="header-anchor" href="#npm-是什么-如何从众人诟病到翻身做主人" aria-hidden="true">#</a> npm 是什么，如何从众人诟病到翻身做主人</h3><blockquote><p>这个不用过多废话，大家非常熟悉。总的来说就是一个开源、免费的包管理器。便于我们下载和分享资源。</p></blockquote><p><code>cnpm、yarn、pnpm</code>等工具都是基于 <code>npm</code> 包管理器的一些变种。解决了早期 <code>npm</code> 的一些缺点，例如下载速度慢，不能离线下载等。</p><p>主要的 npm 版本更新日程：</p><ul><li>npm@v1.0.0 首次发布--2010 年</li><li>npm@v3.0.0 node_modules 目录结构扁平化 --2015 年 06 月</li><li>npm@4.0.0 package-lock.json 前身 npm-shrinkwrap.json 用于依赖锁定--2016 年 10 月</li><li>npm@v5.0.0 package-lock.json 默认生成，并兼容 npm-shrinkwrap.json，重构 npm-cache，大大提升下载速度 --2017 年 05 月</li><li>npm@v5.2.0 npx 命令发布 --2017 年 07 月</li><li>npm@v6.0.0 增加 npm init --2018 年 05 月</li></ul><h3 id="npx-是什么-它解决了什么问题" tabindex="-1"><a class="header-anchor" href="#npx-是什么-它解决了什么问题" aria-hidden="true">#</a> npx 是什么，它解决了什么问题</h3><p><code>npx</code> 是 <code>npm5.2</code> 版本新增的一个命令，如果 <code>npm</code> 版本没到 <code>v5.2</code>，请运行<code>npm install -g npx</code></p><h5 id="可以运行本地的模块" tabindex="-1"><a class="header-anchor" href="#可以运行本地的模块" aria-hidden="true">#</a> 可以运行本地的模块</h5><p>例如在 vue 项目中，想运行本地的 <code>vue-cli-service serve</code> 如果直接在命令行运行会报错：<code>找不到命令</code><img src="'+r+`" alt=""></p><p>所以我们通常这样：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// package.json</span>
<span class="token comment">//....其它配置</span>
<span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-cli-service serve&quot;</span><span class="token punctuation">,</span>
 <span class="token punctuation">}</span><span class="token punctuation">,</span>
 <span class="token comment">//....其它配置</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后： <code>npm run dev</code></p><p>然而现在，通过<code>npx</code>可以这样：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npx vue-cli-service serve
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行成功： <img src="`+t+'" alt=""></p><h5 id="npx-方便使用一次就丢弃的情况-不会全局安装" tabindex="-1"><a class="header-anchor" href="#npx-方便使用一次就丢弃的情况-不会全局安装" aria-hidden="true">#</a> npx 方便使用一次就丢弃的情况，不会全局安装</h5><p>例如 <code>create-react-app</code> ，以往我们需要安装全局的包。但是使用一次后面几乎就不怎么使用了，非常浪费磁盘空间。现在我们可以用<code>npx create-react-app myapp</code>，用完就删，真香！</p><blockquote><p>如果第一次使用这个命令，npx 会下载 create-react-app 放在临时文件中，过一段时间会自动清除，注意<b>不会立即清除</b>，我测试发现第二次运行 npx create-react-app myapp 不会重新下载，它会从缓存中获取。</p></blockquote><h5 id="还有其它好用的功能" tabindex="-1"><a class="header-anchor" href="#还有其它好用的功能" aria-hidden="true">#</a> 还有其它好用的功能</h5>',24),b={href:"http://www.ruanyifeng.com/blog/2019/02/npx.html",target:"_blank",rel:"noopener noreferrer"},x=d(`<h3 id="npm-init-和-npx-相似" tabindex="-1"><a class="header-anchor" href="#npm-init-和-npx-相似" aria-hidden="true">#</a> npm init 和 npx 相似</h3><p>在<code>npm@6</code>版本中，增加了一个新命令<code>npm init &lt;pkg&gt;</code></p><p>这两个命令是等价的：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm init react-app myapp

npx create-react-app myapp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>npm init &lt;pkg&gt;</code>对与<code>create</code>开头的脚手架制定了一个特殊命令，例如<code>create-react-app</code>、<code>create-esm</code>。<code>npm init</code> 下载时会<b>默认对安装的<code>pkg</code>包添加<code>create</code>前缀</b>，同时像<code>npx</code>一样不会全局安装，只是运行一次，后面会删除。</p><p>但<code>npm init &lt;pkg&gt;</code>不能完全取代<code>npx</code>，例如运行<code>npm init http-server</code> 本意是想一次性启动一个本地服务 结果报错:</p><p><img src="https://pic1.zhimg.com/v2-590c3249eed9cd7932b50cc2804ac660_b.jpg" alt=""></p><p>途中可以看到 <code>http-server</code> 被变成了 <code>create-http-server</code>，所以就找不到该模块，推荐用 <code>npx</code> 就好，至少使用起来更可控。</p><h3 id="yarn-是什么-它解决了什么问题" tabindex="-1"><a class="header-anchor" href="#yarn-是什么-它解决了什么问题" aria-hidden="true">#</a> yarn 是什么，它解决了什么问题</h3><p><code>yarn</code> 也是一个包管理器，它和 <code>npm</code> 其实没有本质区别，都是管理和安装包的。只是它解决了早期 <code>npm</code> 的一些问题比如：不支持离线模式、树形结构的依赖、依赖安装不确定性等。为什么说是早期？因为 <code>npm</code> 新版本基本上已经解决了自身的老毛病，两者没有想象中那么大的区别。</p><blockquote><p>从最新版的 <code>npm</code> 和 <code>yarn</code> 来看，他们的安装速度和使用体验并没有多大的差距，<code>yarn</code> 稍胜一筹。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 安装：</span>
npm install <span class="token operator">-</span>g yarn

<span class="token comment">// 安装包：</span>
yarn add <span class="token punctuation">[</span><span class="token keyword">package</span><span class="token punctuation">]</span>

<span class="token comment">// 删除包：</span>
yarn remove <span class="token punctuation">[</span><span class="token keyword">package</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="yarn-相对于-npm-优势-早期" tabindex="-1"><a class="header-anchor" href="#yarn-相对于-npm-优势-早期" aria-hidden="true">#</a> yarn 相对于 npm 优势（早期）：</h5><p>这里列出一些早期的 <code>yarn</code> 相对于 <code>npm</code> 比较大的优势：</p><ul><li>支持离线安装（npm@5 已支持）</li><li>依赖扁平化结构（npm@3 已支持）</li><li>依赖安装确定性 yarn.lock（npm@5 增加了 package-lock.json）</li><li>安装速度快并行下载</li><li>安装失败自动重试</li><li>等等...</li></ul><h3 id="pnpm-是什么-它解决了什么问题" tabindex="-1"><a class="header-anchor" href="#pnpm-是什么-它解决了什么问题" aria-hidden="true">#</a> pnpm 是什么，它解决了什么问题</h3><p><code>pnpm</code> 也是一个包管理器，它巧妙的使用了类似于 <code>linux</code> 的软连接方式，达到一个模块文件多处服用，解决了 <code>yarn、npm</code> 在多个项目安装同一个依赖时会下载重复文件的问题，避免磁盘的浪费，同时大大提升下载速度。</p><p>下面是 <code>pnpm</code> 的一些特点：</p><ul><li><code>pnpm</code> 运行起来非常的快，超过了 <code>npm</code> 和 <code>yarn</code>。</li><li><code>pnpm</code> 采用了一种巧妙的方法，利用硬链接和符号链接来避免复制所有本地缓存源文件。也就是说多个项目相同的依赖只会在某处安装一次，连接过来直接使用，节省了安装时间和瓷盘空间。</li><li><code>pnpm</code> 继承了 <code>yarn</code> 和新版 <code>npm</code> 的所有优点，包括离线模式和确定性安装。</li><li>但是链接在一些场景下会存在兼容的问题，例如 Electron 应用无法使用 <code>pnpm</code>、部署在 <code>lambda</code> 上的应用无法使用 <code>pnpm</code></li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><ul><li><code>npm</code> 是一个包管理器，方便开发者分享和下载开源包。经历了许多重大版本的更新，各方面已经和 <code>yarn</code> 在同一水平。</li><li><code>npx</code> 是<code>npm@5.2</code>的产物，方便运行本地命令</li><li><code>cnpm</code> 是方便中国开发者下载依赖包而诞生的下载器。</li><li><code>yarn</code> 解决了 <code>npm@5</code> 之前的一些让人诟病的问题，同时拥有一些其它的优点。例如离线安装、失败自动重试安装和并行下载等。</li><li><code>pnpm</code> 通过连接的方式，让多个项目的依赖公用同一个包，大大节省了磁盘空间，比 <code>yarn</code> 和 npm 下载速度快得多，但是也有连接带来的各种兼容问题。</li></ul><blockquote><p>使用 npm、yarn、pnpm 都是可以的，但是最好是团队都使用同一个管理器。</p></blockquote>`,22);function k(g,y){const c=p("ExternalLinkIcon");return i(),s("div",null,[u,e("p",null,[e("a",h,[n("原文链接"),a(c)])]),v,e("blockquote",null,[e("p",null,[n("npx 可以下载指定的版本，可以指定 node 版本运行等请参考"),e("a",b,[n("阮一峰老师的 npx 介绍"),a(c)]),n("，全面易懂")])]),x])}const f=o(m,[["render",k],["__file","index.html.vue"]]);export{f as default};
