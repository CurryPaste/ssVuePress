import{_ as e,r as t,o as p,c as i,b as n,d as s,a as l,e as c}from"./app.4f2cb50a.js";const o={},u=n("h1",{id:"javascript-中的-严格模式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#javascript-中的-严格模式","aria-hidden":"true"},"#"),s(" JavaScript 中的 严格模式")],-1),r={href:"https://juejin.cn/post/6844903566121893895",target:"_blank",rel:"noopener noreferrer"},d=c(`<p><code>严格模式</code>：使用严格模式的好处是可以提早知道代码中存在的错误，及时捕获一些可能导致编程错误的 <code>ECMAScript</code> 行为。</p><h3 id="严格模式的选择使用" tabindex="-1"><a class="header-anchor" href="#严格模式的选择使用" aria-hidden="true">#</a> 严格模式的选择使用</h3><p>严格模式的编译指示(pragma): <code>&quot;use strict&quot;</code>;，支持严格模式的引擎会启动这种模式，而不支持该模式的引擎就当遇到了一个未赋值的字符串字面量，会忽略这个编译指示。</p><ul><li>在全局作用域中(函数外部)给出这个编译指示，则整个脚本都将使用严格模式。</li><li>在函数作用域中给出这个编译指示，则这个函数将使用严格模式</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">test</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="格模式的规范" tabindex="-1"><a class="header-anchor" href="#格模式的规范" aria-hidden="true">#</a> 格模式的规范</h3><h4 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h4><ul><li>不允许意外创建全局变量，给一个没有声明的变量赋值，那代码在执行时就会抛出 ReferenceError</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 未声明变量</span>
<span class="token comment">// 非严格模式:创建全局变量</span>
<span class="token comment">// 严格模式:抛出 ReferenceError</span>
message <span class="token operator">=</span> <span class="token string">&quot;Hello world! &quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>不能对变量调用 delete 操作符</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//删除变量</span>
<span class="token comment">//非严格模式:静默失败</span>
<span class="token comment">//严格模式:抛出 ReferenceError</span>
<span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">delete</span> color<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>严格模式下对变量名也有限制，不能使用 implements、interface、let、package、 private、protected、public、static 和 yield 标识符作为变量名，使用以上标识符作为变量名会导致语法错误。</li></ul><h4 id="对象" tabindex="-1"><a class="header-anchor" href="#对象" aria-hidden="true">#</a> 对象</h4><ul><li>为只读属性赋值会抛出 TypeError</li><li>对不可配置的(nonconfigurable)的属性使用 delete 操作符会抛出 TypeError</li><li>为不可扩展的(nonextensible)的对象添加属性会抛出 TypeError</li><li>使用对象字面量时，属性名必须唯一</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 重名属性</span>
<span class="token comment">// 非严格模式:没有错误，以第二个属性为准</span>
<span class="token comment">// 严格模式:抛出语法错误</span>
<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Nicholas&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Greg&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h4><ul><li>严格模式要求命名函数的参数必须唯一</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//重名参数</span>
<span class="token comment">//非严格模式:没有错误，只能访问第二个参数</span>
<span class="token comment">//严格模式:抛出语法错误</span>
<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">num<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// todo</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在非严格模式下，修改命名参数的值也会反映到 arguments 对象中，而严格模式下这两个值是完全独立的</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//修改命名参数的值</span>
<span class="token comment">//非严格模式:修改会反映到 arguments 中</span>
<span class="token comment">//严格模式:修改不会反映到 arguments 中</span>
<span class="token keyword">function</span> <span class="token function">showValue</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  value <span class="token operator">=</span> <span class="token string">&quot;Foo&quot;</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&quot;Foo&quot;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//非严格模式:&quot;Foo&quot;，严格模式:&quot;Hi&quot;</span>
<span class="token punctuation">}</span>
<span class="token function">showValue</span><span class="token punctuation">(</span><span class="token string">&quot;Hi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>arguments.callee 和 arguments.caller，在非严格模式下，这两个属性一个引用函数本身，一个引用调用函数。而在严格模式下，访问哪个属性都会抛出 TypeError</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//访问 arguments.callee</span>
<span class="token comment">//非严格模式:没有问题</span>
<span class="token comment">//严格模式:抛出 TypeError</span>
<span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> num <span class="token operator">*</span> arguments<span class="token punctuation">.</span><span class="token function">callee</span><span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>严格模式对函数名也做出了限制，不允许用 implements、interface、let、package、private、protected、public、static 和 yield 作为函数名</p></li><li><p>只能在脚本的顶级和在函数内部声明函数</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//在 if 语句中声明函数</span>
<span class="token comment">//非严格模式:将函数提升到 if 语句外部</span>
<span class="token comment">//严格模式:抛出语法错误</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// todo</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eval" tabindex="-1"><a class="header-anchor" href="#eval" aria-hidden="true">#</a> eval()</h4><ul><li>在严格模式中，它在包含上下文中不再创建变量或函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//使用 eval()创建变量</span>
<span class="token comment">//非严格模式:弹出对话框显示 10</span>
<span class="token comment">//严格模式:调用 alert(x)时会抛出 ReferenceError</span>
<span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;var x=10&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以在 eval()中声明变量和函数，但这些变量或函数只能在被求值的特殊作用域中有效，随后就将被销毁</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;var x=10, y=11; x+y&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 21</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eval-和-arguments" tabindex="-1"><a class="header-anchor" href="#eval-和-arguments" aria-hidden="true">#</a> eval 和 arguments</h4><p>严格模式已经明确禁止使用 eval 和 arguments 作为标识符，也不允许读写它们的值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 把 eval 和 arguments 作为变量引用</span>
<span class="token comment">// 非严格模式: 没问题，不出错</span>
<span class="token comment">// 严格模式: 抛出语法错误</span>
<span class="token keyword">var</span> eval <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arguments <span class="token operator">=</span> <span class="token string">&quot;Hello world!&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="抑制-this" tabindex="-1"><a class="header-anchor" href="#抑制-this" aria-hidden="true">#</a> 抑制 this</h4><p>在非严格模式下使用函数的 apply()或 call()方法时，null 或 undefined 值会被转换为全局 对象。而在严格模式下，函数的 this 值始终是指定的值，无论指定的是什么值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 访问属性</span>
<span class="token comment">// 非严格模式: 传入null, 函数的this值是全局对象</span>
<span class="token comment">// 严格模式: 抛出错误，因为this的值为 null</span>
<span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">displayColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">displayColor</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="其他变化" tabindex="-1"><a class="header-anchor" href="#其他变化" aria-hidden="true">#</a> 其他变化</h4><ul><li>非严格模式下的 with 语句能够改变解析标识符的路径。严格模式下，with 被简化掉了</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//with 的语句用法</span>
<span class="token comment">//非严格模式:允许</span>
<span class="token comment">//严格模式:抛出语法错误</span>
<span class="token keyword">with</span> <span class="token punctuation">(</span>location<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>严格模式去掉了 JavaScript 中的八进制字面量</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//使用八进制字面量</span>
<span class="token comment">//非严格模式:值为 8</span>
<span class="token comment">//严格模式:抛出语法错误</span>
<span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">010</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>严格模式下 parseInt()的行为，八进制字面量在严格模式下会被当作以 0 开头的十进制字面量</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//使用 parseInt()解析八进制字面量</span>
<span class="token comment">//非严格模式:值为 8</span>
<span class="token comment">//严格模式:值为 10</span>
<span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;010&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,42);function v(m,k){const a=t("ExternalLinkIcon");return p(),i("div",null,[u,n("p",null,[n("a",r,[s("原文链接"),l(a)])]),d])}const h=e(o,[["render",v],["__file","index.html.vue"]]);export{h as default};
